import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import asyncio
from keep_alive import keep_alive

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load sensitive values from environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

# Handle Google Credentials stored as JSON string
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
if GOOGLE_CREDS_JSON:
    with open("credentials.json", "w") as f:
        f.write(GOOGLE_CREDS_JSON)

# Conversation states
BUDGET, DISTRICT, TIMING, CREDIT, PHONE = range(5)

def save_to_sheet(data):
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("Telegram Leads").sheet1

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        row = [
            data.get("phone", ""),
            data.get("budget", ""),
            data.get("district", ""),
            data.get("timing", ""),
            data.get("credit", ""), 
            now
        ]
        sheet.append_row(row)
        logger.info("Data saved to Google Sheets successfully")
    except Exception as e:
        logger.error(f"Error saving to Google Sheets: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè° –ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! –ú–µ–Ω–∏–Ω–≥ –∏—Å–º–∏–º –ë–∞—Ö–æ–¥–∏—Ä. –¢–æ—à–∫–µ–Ω—Ç–¥–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞ “õ–∏–¥–∏—Ä—è–ø—Å–∏–∑–º–∏? –ú–µ–Ω –°–∏–∑–≥–∞ –∞–ª–±–∞—Ç—Ç–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞ –æ–ª–∞–º–∞–Ω.\n–ö–µ–ª–∏–Ω–≥, –°–∏–∑–≥–∞ –∞–Ω–∏“õ —Ç–∞–∫–ª–∏—Ñ —é–±–æ—Ä–∏—à–∏–º–∏–∑ —É—á—É–Ω –±–∏—Ä –Ω–µ—á—Ç–∞ —Å–∞–≤–æ–ª–ª–∞—Ä–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä—Å–∞–Ω–≥–∏–∑\n–ê–≤–≤–∞–ª–∞–º–±–æ—Ä, —Ö–∞—Ä–∏–¥ —É—á—É–Ω –±—é–¥–∂–µ—Ç–∏–Ω–≥–∏–∑ “õ–∞–Ω—á–∞?:",
        reply_markup=ReplyKeyboardMarkup(
            [["üí∏30 000$ –≥–∞—á–∞"], ["üíµ 30 000$ ‚Äì 50 000$"], ["üí∞ 50 000$ ‚Äì 70 000$"], ["üíµ 70 000 –¥–∞–Ω —é“õ–æ—Ä–∏"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text(
        "–ó—û—Ä! –≠–Ω–¥–∏, üìç “õ–∞–π—Å–∏ —Ç—É–º–∞–Ω–¥–∞–Ω —Ö–æ—Ö–ª–∞–π—Å–∏–∑?",
        reply_markup=ReplyKeyboardMarkup(
            [["üèô –°–µ—Ä–≥–µ–ª–∏"], ["üè¢ –ú–∏—Ä–∑–æ –£–ª—É“ì–±–µ–∫"], ["üè† –ß–∏–ª–æ–Ω–∑–æ—Ä"], ["üåÜ –Ø—à–Ω–æ–±–æ–¥"], ["üåè —Ç—É–º–∞–Ω–∏ –∞–Ω–∏“õ —ç–º–∞—Å"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return DISTRICT

async def district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["district"] = update.message.text
    await update.message.reply_text(
        "–•—û–ø!üïí “ö–∞—á–æ–Ω —Ö–∞—Ä–∏–¥ “õ–∏–ª–∏—à–Ω–∏ —Ä–µ–∂–∞–ª–∞—à—Ç–∏—Ä—è–ø—Å–∏–∑?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚è± 1 –æ–π –∏—á–∏–¥–∞"], ["üïì 2-3 –æ–π–¥–∞"], ["üëÄ –®—É–Ω—á–∞–∫–∏ –∫—û—Ä–∏—è–ø–º–∞–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return TIMING

async def timing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["timing"] = update.message.text
    await update.message.reply_text(
        "üè¶ –ö–≤–∞—Ä—Ç–∏—Ä–∞–Ω–∏ –∫—Ä–µ–¥–∏—Ç –æ—Ä“õ–∞–ª–∏ –æ–ª–∏—à–Ω–∏ —û–π–ª–∞—è–ø—Å–∏–∑–º–∏?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ “≤–∞"], ["‚ùå –ô—û“õ"], ["ü§î “≤–∞–ª–∏ –±–∏–ª–º–∞–π–º–∞–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CREDIT

async def credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["credit"] = update.message.text
    await update.message.reply_text("–Ø—Ö—à–∏, –æ—Ö–∏—Ä–≥–∏ “õ–∞–¥–∞–º ‚Äî –°–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à–∏–º–∏–∑ —É—á—É–Ω –∏–ª—Ç–∏–º–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:")
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    summary = (f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
               f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['budget']}\n"
               f"üìç –¢—É–º–∞–Ω: {context.user_data['district']}\n"
               f"üïí –ú—É–¥–¥–∞—Ç: {context.user_data['timing']}\n"
               f"üè¶ –ö—Ä–µ–¥–∏—Ç: {context.user_data['credit']}")
    
    await update.message.reply_text("‚úÖ Ma'lumotlaringiz qabul qilindi!\n\n" + summary)

    # Save to Google Sheet
    save_to_sheet(context.user_data)

    # Send admin notification to group chat
    try:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üì• Yangi lead:\n\n" + summary)
    except Exception as e:
        logger.error(f"Error sending message to group: {e}")
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Jarayon bekor qilindi.")
    return ConversationHandler.END

async def main():
    """Main function to run the bot"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return
    
    # Create application
    app = Application.builder().token(BOT_TOKEN).build()

    # Create conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, district)],
            TIMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, timing)],
            CREDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, credit)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # Add handlers
    app.add_handler(conv_handler)
    
    logger.info("Bot starting...")
    
    # Start the bot
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    
    # Keep the bot running
    logger.info("Bot is running. Press Ctrl+C to stop.")
    try:
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        logger.info("Received stop signal")
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

# Entry point
if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
