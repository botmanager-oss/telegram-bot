
import logging
import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from keep_alive import keep_alive

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

keep_alive()

# Load secrets from environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

if not BOT_TOKEN or not GROUP_CHAT_ID or not GOOGLE_CREDS_JSON:
    raise ValueError("Missing required environment variables. Please set BOT_TOKEN, GROUP_CHAT_ID, and GOOGLE_CREDS_JSON in Secrets.")

BUDGET, DISTRICT, TIMING, CREDIT, PHONE = range(5)

# Initialize Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(GOOGLE_CREDS_JSON)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("Telegram Leads").sheet1

def save_to_sheet(data):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = [
        data.get("phone", ""),
        data.get("budget", ""),
        data.get("district", ""),
        data.get("timing", ""),
        data.get("credit", ""), now
    ]
    sheet.append_row(row)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè° –ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! –ú–µ–Ω–∏–Ω–≥ –∏—Å–º–∏–º –ë–∞—Ö–æ–¥–∏—Ä. –¢–æ—à–∫–µ–Ω—Ç–¥–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞ “õ–∏–¥–∏—Ä—è–ø—Å–∏–∑–º–∏? –ú–µ–Ω –°–∏–∑–≥–∞ –∞–ª–±–∞—Ç—Ç–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞ –æ–ª–∞–º–∞–Ω.\n–ö–µ–ª–∏–Ω–≥, –°–∏–∑–≥–∞ –∞–Ω–∏“õ —Ç–∞–∫–ª–∏—Ñ —é–±–æ—Ä–∏—à–∏–º–∏–∑ —É—á—É–Ω –±–∏—Ä –Ω–µ—á—Ç–∞ —Å–∞–≤–æ–ª–ª–∞—Ä–≥–∞ –∂–∞–≤–æ–± –±–µ—Ä—Å–∞–Ω–≥–∏–∑.\n\n–ê–≤–≤–∞–ª–∞–º–±–æ—Ä, —Ö–∞—Ä–∏–¥ —É—á—É–Ω –±—é–¥–∂–µ—Ç–∏–Ω–≥–∏–∑ “õ–∞–Ω—á–∞?:",
        reply_markup=ReplyKeyboardMarkup(
            [["üí∏30 000$ –≥–∞—á–∞"], ["üíµ 30 000$ ‚Äì 50 000$"],
             ["üí∞ 50 000$ ‚Äì 70 000$"], ["üíµ 70 000 –¥–∞–Ω —é“õ–æ—Ä–∏"]],
            one_time_keyboard=True,
            resize_keyboard=True))
    return BUDGET


async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    await update.message.reply_text(
        "–ó—û—Ä! –≠–Ω–¥–∏, üìç “õ–∞–π—Å–∏ —Ç—É–º–∞–Ω–¥–∞–Ω —Ö–æ—Ö–ª–∞–π—Å–∏–∑?",
        reply_markup=ReplyKeyboardMarkup(
            [["üèô –°–µ—Ä–≥–µ–ª–∏"], ["üè¢ –ú–∏—Ä–∑–æ –£–ª—É“ì–±–µ–∫"], ["üè† –ß–∏–ª–æ–Ω–∑–æ—Ä"], ["üåÜ –Ø—à–Ω–æ–±–æ–¥"],
             ["üåè —Ç—É–º–∞–Ω–∏ –∞–Ω–∏“õ —ç–º–∞—Å"]],
            one_time_keyboard=True,
            resize_keyboard=True))
    return DISTRICT


async def district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["district"] = update.message.text
    await update.message.reply_text(
        "–•—û–ø!üïí “ö–∞—á–æ–Ω —Ö–∞—Ä–∏–¥ “õ–∏–ª–∏—à–Ω–∏ —Ä–µ–∂–∞–ª–∞—à—Ç–∏—Ä—è–ø—Å–∏–∑?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚è± 1 –æ–π –∏—á–∏–¥–∞"], ["üïì 2-3 –æ–π–¥–∞"], ["üëÄ –®—É–Ω—á–∞–∫–∏ –∫—û—Ä–∏—è–ø–º–∞–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True))
    return TIMING


async def timing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["timing"] = update.message.text
    await update.message.reply_text(
        "üè¶ –ö–≤–∞—Ä—Ç–∏—Ä–∞–Ω–∏ –∫—Ä–µ–¥–∏—Ç –æ—Ä“õ–∞–ª–∏ –æ–ª–∏—à–Ω–∏ —û–π–ª–∞—è–ø—Å–∏–∑–º–∏?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ “≤–∞"], ["‚ùå –ô—û“õ"], ["ü§î “≤–∞–ª–∏ –±–∏–ª–º–∞–π–º–∞–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True))
    return CREDIT


async def credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["credit"] = update.message.text
    await update.message.reply_text(
        "–Ø—Ö—à–∏, –æ—Ö–∏—Ä–≥–∏ “õ–∞–¥–∞–º ‚Äî –°–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à–∏–º–∏–∑ —É—á—É–Ω –∏–ª—Ç–∏–º–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:"
    )
    return PHONE


async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    summary = (f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
               f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data['budget']}\n"
               f"üìç –¢—É–º–∞–Ω: {context.user_data['district']}\n"
               f"üïí –ú—É–¥–¥–∞—Ç: {context.user_data['timing']}\n"
               f"üè¶ –ö—Ä–µ–¥–∏—Ç: {context.user_data['credit']}")
    await update.message.reply_text(
        "‚úÖ –†–∞—Ö–º–∞—Ç! –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –≠–Ω–≥ –º–æ—Å —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞–±, —Ç–µ–∑ –æ—Ä–∞–¥–∞ –°–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∞–º–∏–∑.\n\n"
        + summary)

    save_to_sheet(context.user_data)

    await context.bot.send_message(chat_id=GROUP_CHAT_ID,
                                   text="üì• Yangi lead:\n\n" + summary)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ñ–∞—Ä–∞—ë–Ω –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.")
    return ConversationHandler.END


app = ApplicationBuilder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
        DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, district)],
        TIMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, timing)],
        CREDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, credit)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.run_polling()
